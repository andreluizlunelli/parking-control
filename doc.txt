como vai funcionar: 
- a pessoa define um preço default e pode adicionar várias datas com várias cobranças;

FALTANDO:
- CONEXÃO DOS DADOS COM O BANCO
- INTERAÇÃO COM A VIEW

[ESTRUTURA DA BASE DE DADOS]

create DATABASE parking_control;
create TABLE VehicleEntrance (
	id int NOT NULL AUTO_INCREMENT
	, HourPrice DOUBLE
	, Board VARCHAR(255)
	, DateIn DATETIME
	, DateOut DATETIME
	, PriceCharged DOUBLE
	, PRIMARY KEY (id)
);
create TABLE ValidityDateControl (
	id int NOT NULL AUTO_INCREMENT
	, HourPrice DOUBLE
	, InitialDate DATETIME
	, FinalDate DATETIME
	, PRIMARY KEY (id)
);

INSERT INTO VehicleEntrance (HourPrice, Board, DateIn, PriceCharged) VALUES (5, "ABC 1234", "2015-9-25 16:00:00", 0);


Controle de estacionamento

Objetivo:

Desenvolver um aplicativo simples para controle de estacionamento onde o usuário poderá registrar a entrada e saída dos veículos. 

OK : Os valores praticados pelo estacionamento devem ser parametrizados em uma tabela de preços com controle vigência. Exemplo: Valores válidos para o período de 01/01/2015 até 31/12/2015.

OK : Utilizar a data de entrada do veículo como referência para buscar a tabela de preços.

OK : A tabela de preço deve contemplar o valor da hora inicial e valor para as horas adicionais.

OK	Será cobrado metade do valor da hora inicial quando o tempo total de permanência no estacionamento for igual ou inferior a 30 minutos.
	O valor da hora adicional possui uma tolerância de 10 minutos para cada 1 hora. Exemplo: 30 minutos valor R$ 1,00 | 1 hora valor R$ 2,00 | 1 hora 10 minutos valor R$ 2,00 | 1 hora e 15 minutos valor R$ 3,00 | 2 horas e 5 minutos valor R$ 3,00 | 2 horas e 15 minutos valor R$ 4,00.

OK : Utilizar a placa do veículo como chave de busca. 

O sistema deve possuir uma interface desktop ou web para registrar as entradas, saídas e parametrizações.

Utilizar uma estrutura de armazenamento local como Arquivo, SQLite, Access, MySql, DB4o, etc.

O sistema deve ser implementado em C#. 
A interface pode ser Desktop ou Web.
Se possível utilizar conceitos de mercado como Entity framework, LINQ, MVC, design patterns, TDD.
